// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// AUTH & USER MANAGEMENT
// ============================================================================

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cards            Card[]
  transactions     Transaction[]
  statements       Statement[]
  categories       Category[]
  recurringExpense RecurringExpense[]
  savingRule       SavingRule[]

  @@map("users")
}

// ============================================================================
// CARD MANAGEMENT
// ============================================================================

model Card {
  id        String   @id @default(uuid())
  userId    String
  name      String   // "Amex Centurion", "Chase Sapphire"
  bank      String   // "American Express", "Chase"
  last4     String   // Last 4 digits
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  statements Statement[]

  @@unique([userId, last4])
  @@map("cards")
}

// ============================================================================
// STATEMENT & TRANSACTION MANAGEMENT (Statement-Centric)
// ============================================================================

model Statement {
  id              String            @id @default(uuid())
  userId          String
  cardId          String
  pdfUrl          String?           // Supabase Storage URL
  uploadDate      DateTime          @default(now())
  statementDate   DateTime          // The statement's billing period end date
  status          StatementStatus   @default(PENDING)
  extractedCount  Int               @default(0) // Number of transactions extracted
  importedCount   Int               @default(0) // Number of transactions imported
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  card         Card          @relation(fields: [cardId], references: [id], onDelete: Restrict)
  transactions Transaction[]

  @@index([userId, cardId])
  @@index([statementDate])
  @@map("statements")
}

enum StatementStatus {
  PENDING      // PDF uploaded, waiting for AI extraction
  EXTRACTED    // AI extraction complete, review needed
  IMPORTED     // Transactions imported to database
  ARCHIVED     // Statement processed and archived
}

model Transaction {
  id              String   @id @default(uuid())
  statementId     String?  // NULL if manually entered
  userId          String
  categoryId      String?
  merchantName    String   // "AMAZON.COM", "STARBUCKS #12345"
  description     String?  // User-editable description
  amount          Decimal  @db.Decimal(12, 2)
  type            TransactionType // EXPENSE, INCOME, REFUND
  date            DateTime
  confidence      Float?   // AI extraction confidence score (0-1)
  rawText         String?  // Original OCR/PDF text
  isManualEntry   Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  statement Statement? @relation(fields: [statementId], references: [id], onDelete: SetNull)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  category  Category?  @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([userId, date])
  @@index([statementId])
  @@index([categoryId])
  @@map("transactions")
}

enum TransactionType {
  EXPENSE
  INCOME
  REFUND
}

// ============================================================================
// CATEGORY MANAGEMENT
// ============================================================================

model Category {
  id        String   @id @default(uuid())
  userId    String
  name      String   // "Food & Dining", "Travel", etc.
  color     String   @default("#808080") // Hex color
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      Transaction[]
  recurringExpenses RecurringExpense[]

  @@unique([userId, name])
  @@map("categories")
}

// ============================================================================
// PRE-DEDUCTION SYSTEM (Sprint 2+)
// These models are prepared for future implementation but not used in Sprint 0.5
// ============================================================================

model RecurringExpense {
  id           String           @id @default(uuid())
  userId       String
  categoryId   String?
  name         String           // "Netflix Subscription"
  description  String?
  amount       Decimal          @db.Decimal(12, 2)
  frequency    RecurringFrequency
  startDate    DateTime
  endDate      DateTime?        // NULL if ongoing
  isActive     Boolean          @default(true)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@index([userId])
  @@map("recurring_expenses")
}

enum RecurringFrequency {
  WEEKLY
  BIWEEKLY
  MONTHLY
  QUARTERLY
  BIANNUAL
  ANNUAL
}

model SavingRule {
  id        String   @id @default(uuid())
  userId    String
  name      String   // "Auto-savings", "Emergency fund"
  amount    Decimal  @db.Decimal(12, 2)
  frequency String   // MONTHLY, ANNUALLY, etc.
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("saving_rules")
}

// ============================================================================
// FUTURE MODELS (Sprint 2+)
// Prepared for future implementation but not needed in Sprint 0.5
// ============================================================================

// model MonthlyBudget {
//   id        String   @id @default(uuid())
//   userId    String
//   month     String   // "2025-11"
//   budgeted  Decimal  @db.Decimal(12, 2)
//   spent     Decimal  @db.Decimal(12, 2)
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//
//   @@unique([userId, month])
// }

// model TransactionMatch {
//   id          String   @id @default(uuid())
//   userId      String
//   expected    String   // RecurringExpense ID or name
//   actual      String   // Transaction ID
//   matchedAt   DateTime @default(now())
//
//   @@unique([userId, expected, actual])
// }
